// Cloudflare Pages Function for completing member registration after Stripe checkout
import { createClient } from '@supabase/supabase-js';

interface Env {
  SUPABASE_URL: string;
  SUPABASE_SERVICE_ROLE_KEY: string;
}

interface CompletionRequest {
  stripeSessionId: string;
  stripeCustomerId: string;
  email: string;
  firstName: string;
  lastName: string;
  phone?: string;
  membershipType: string;
  // Additional member data
  mainProfession?: string;
  company?: string;
  yearsExperience?: number;
  autonomousCommunity?: string;
  acceptsNewsletter?: boolean;
}

export async function onRequestPost(context: { request: Request; env: Env }) {
  const { request, env } = context;

  // CORS headers
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Content-Type': 'application/json',
  };

  // Handle preflight requests
  if (request.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  try {
    const body: CompletionRequest = await request.json();

    // Initialize Supabase client
    const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY);

    // Check if member already exists
    const { data: existingMember } = await supabase
      .rpc('get_member_by_email', { member_email: body.email });

    let memberId: string;

    if (existingMember && existingMember.length > 0) {
      // Update existing member with Stripe info and additional data
      const { error } = await supabase
        .from('members')
        .update({
          stripe_customer_id: body.stripeCustomerId,
          phone: body.phone,
          main_profession: body.mainProfession,
          company: body.company,
          years_experience: body.yearsExperience,
          autonomous_community: body.autonomousCommunity,
          accepts_newsletter: body.acceptsNewsletter,
          membership_type: body.membershipType,
        })
        .eq('id', existingMember[0].id)
        .select()
        .single();

      if (error) throw error;
      memberId = existingMember[0].id;

      // Log completion activity
      await supabase
        .from('member_activity')
        .insert({
          member_id: memberId,
          activity_type: 'registration_completed',
          activity_data: {
            stripe_session_id: body.stripeSessionId,
            stripe_customer_id: body.stripeCustomerId,
            completed_via: 'stripe_checkout'
          }
        });

    } else {
      // Create new member (member_number will be auto-generated by trigger)
      const { data, error } = await supabase
        .from('members')
        .insert([{
          first_name: body.firstName,
          last_name: body.lastName,
          email: body.email,
          phone: body.phone,
          membership_type: body.membershipType,
          main_profession: body.mainProfession,
          company: body.company,
          years_experience: body.yearsExperience,
          autonomous_community: body.autonomousCommunity,
          accepts_newsletter: body.acceptsNewsletter || false,
          gdpr_accepted: true,
          stripe_customer_id: body.stripeCustomerId,
          is_active: true,
          profile_completed: calculateProfileCompletion(body),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
          // member_number will be auto-generated by database trigger
        }])
        .select()
        .single();

      if (error) throw error;
      memberId = data.id;

      // Log new member activity
      await supabase
        .from('member_activity')
        .insert({
          member_id: memberId,
          activity_type: 'member_created',
          activity_data: {
            stripe_session_id: body.stripeSessionId,
            stripe_customer_id: body.stripeCustomerId,
            source: 'stripe_checkout'
          }
        });
    }

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Member registration completed successfully',
        memberId,
      }),
      { status: 200, headers: corsHeaders }
    );

  } catch (error) {
    console.error('Error completing registration:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: 'Error completing registration',
      }),
      { status: 500, headers: corsHeaders }
    );
  }
}

/**
 * Calculate profile completion percentage based on required fields
 */
function calculateProfileCompletion(memberData: CompletionRequest): number {
  const requiredFields = [
    'firstName',
    'lastName', 
    'email',
    'phone',
    'mainProfession',
    'autonomousCommunity'
  ];
  
  const completedFields = requiredFields.filter(field => {
    const value = memberData[field as keyof CompletionRequest];
    return value && String(value).trim() !== '';
  });
  
  return Math.round((completedFields.length / requiredFields.length) * 100);
}